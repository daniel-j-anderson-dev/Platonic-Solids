Have a camera
Have a single platonic solid
Prompt user to select a platonic solid
Use perspective projection to display selected solid
Allow control position of camera
Allow control orientation of camera
Allow control position of shape 
Allow control orientation of shape
Allow for control to end execution

Model
    POD's
    helper method
View
    displays model in some way
        renderer
Controller 
    modifies model



Model
    Quaternion
    point -> struct
    color -> struct
    Shape3D
View
    renderer
        setAxes()
        drawAxes()
        drawLine()
        drawShape()
        drawShapes()
        clearScreen()
        update()
Controller
    Rotator
    EventHandler
        handleInputs()
        handleEvents()
        ** separate function for each event, etc. something of that nature
    Main
        ** main logic loop
        run()
            Shape3D cube;
            cube.vertices = some std::vector<Point>;
            cube.edges = some std::vector<std::pair<int, int>>;
            etc.